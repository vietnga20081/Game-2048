name: Build Multi-Platform 2048 Game

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Build Windows executable
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name "2048-Game" --add-data "*.json;." main.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: 2048-Game-Windows
        path: dist/2048-Game.exe

  # Build macOS executable  
  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build macOS executable
      run: |
        pyinstaller --onefile --windowed --name "2048-Game" --add-data "*.json:." main.py
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: 2048-Game-macOS
        path: dist/2048-Game

  # Build Linux executable
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-setuptools
        sudo apt-get install -y libasound2-dev libpulse-dev
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux executable
      run: |
        pyinstaller --onefile --name "2048-Game" --add-data "*.json:." main.py
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: 2048-Game-Linux
        path: dist/2048-Game

  # Build Android APK using Buildozer
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip build-essential git python3-dev
        sudo apt-get install -y ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
        sudo apt-get install -y libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev
        sudo apt-get install -y zlib1g-dev
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Install Buildozer
      run: |
        pip install buildozer
        pip install cython
    
    - name: Create Kivy version of the game
      run: |
        cat > kivy_main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.widget import Widget
        from kivy.uix.label import Label
        from kivy.uix.gridlayout import GridLayout
        from kivy.uix.boxlayout import BoxLayout
        from kivy.graphics import Color, Rectangle
        from kivy.clock import Clock
        from kivy.core.window import Window
        import random
        import json
        import os

        class Game2048Widget(Widget):
            def __init__(self, **kwargs):
                super().__init__(**kwargs)
                self.grid_size = 4
                self.grid = [[0 for _ in range(self.grid_size)] for _ in range(self.grid_size)]
                self.score = 0
                self.best_score = self.load_best_score()
                
                self.bind(size=self.update_graphics)
                Window.bind(on_keyboard=self.on_keyboard)
                
                self.add_random_tile()
                self.add_random_tile()
                
                Clock.schedule_interval(self.update_display, 1.0/60.0)
            
            def load_best_score(self):
                try:
                    if os.path.exists('best_score.json'):
                        with open('best_score.json', 'r') as f:
                            data = json.load(f)
                            return data.get('best_score', 0)
                except:
                    pass
                return 0
            
            def add_random_tile(self):
                empty_cells = []
                for i in range(self.grid_size):
                    for j in range(self.grid_size):
                        if self.grid[i][j] == 0:
                            empty_cells.append((i, j))
                
                if empty_cells:
                    i, j = random.choice(empty_cells)
                    self.grid[i][j] = 2 if random.random() < 0.9 else 4
            
            def move_left(self):
                moved = False
                new_grid = [[0 for _ in range(self.grid_size)] for _ in range(self.grid_size)]
                
                for i in range(self.grid_size):
                    row = [val for val in self.grid[i] if val != 0]
                    
                    j = 0
                    while j < len(row):
                        if j + 1 < len(row) and row[j] == row[j + 1]:
                            new_grid[i][j] = row[j] * 2
                            self.score += row[j] * 2
                            row.pop(j + 1)
                        else:
                            new_grid[i][j] = row[j]
                        j += 1
                
                if new_grid != self.grid:
                    moved = True
                    self.grid = new_grid
                
                return moved
            
            def on_keyboard(self, window, key, *args):
                moved = False
                if key == 97:  # 'a' key
                    moved = self.move_left()
                elif key == 100:  # 'd' key  
                    self.grid = [row[::-1] for row in self.grid]
                    moved = self.move_left()
                    self.grid = [row[::-1] for row in self.grid]
                elif key == 119:  # 'w' key
                    self.grid = list(map(list, zip(*self.grid)))
                    moved = self.move_left()
                    self.grid = list(map(list, zip(*self.grid)))
                elif key == 115:  # 's' key
                    self.grid = list(map(list, zip(*self.grid)))
                    self.grid = [row[::-1] for row in self.grid]
                    moved = self.move_left()
                    self.grid = [row[::-1] for row in self.grid]
                    self.grid = list(map(list, zip(*self.grid)))
                
                if moved:
                    self.add_random_tile()
                
                return True
            
            def update_graphics(self, *args):
                pass
                
            def update_display(self, dt):
                pass

        class Game2048App(App):
            def build(self):
                return Game2048Widget()

        if __name__ == '__main__':
            Game2048App().run()
        EOF
    
    - name: Create buildozer.spec
      run: |
        buildozer init
        sed -i 's/title = My Application/title = 2048 Game/' buildozer.spec
        sed -i 's/source.dir = ./source.dir = ./' buildozer.spec
        sed -i 's/source.include_exts = py,png,jpg,kv,atlas/source.include_exts = py,png,jpg,kv,atlas,json/' buildozer.spec
        sed -i 's/#requirements = python3,kivy/requirements = python3,kivy/' buildozer.spec
        sed -i 's/package.name = myapp/package.name = game2048/' buildozer.spec
        sed -i 's/package.domain = org.example/package.domain = com.example/' buildozer.spec
        sed -i 's/#android.permissions = INTERNET/#android.permissions = WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE/' buildozer.spec
    
    - name: Build Android APK
      run: |
        buildozer android debug
    
    - name: Upload Android APK
      uses: actions/upload-artifact@v3
      with:
        name: 2048-Game-Android
        path: bin/*.apk

  # Release job (runs only on tags)
  release:
    needs: [build-windows, build-macos, build-linux, build-android]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          2048-Game-Windows/*
          2048-Game-macOS/*
          2048-Game-Linux/*
          2048-Game-Android/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
